@model Demo.Models.Project
@{
    ViewBag.Title = "StaffSync | Project Details";
    var employees = ViewBag.Employees as List<Demo.Models.Employee> ?? new List<Demo.Models.Employee>();
    var projectStats = ViewBag.ProjectStats as Dictionary<string, object> ?? new Dictionary<string, object>();
    var attendanceRates = ViewBag.EmployeeAttendanceRates as Dictionary<string, decimal> ?? new Dictionary<string, decimal>();
    var employeeOtherProjects = ViewBag.EmployeeOtherProjects as Dictionary<string, List<Demo.Models.Project>> ?? new Dictionary<string, List<Demo.Models.Project>>();
    var departmentChartData = ViewBag.DepartmentChartData;
    var positionChartData = ViewBag.PositionChartData;
}

<h1>Project Details</h1>

@if (TempData["Info"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @TempData["Info"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@if (TempData["Error"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @TempData["Error"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<!-- Project Header -->
<div class="card mb-4">
    <div class="card-header bg-primary text-white">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <h4 class="mb-0">
                    <i class="fas fa-project-diagram"></i> @Model.Name
                </h4>
                <small>Project ID: @Model.Id</small>
            </div>
            <div>
                @if (Model.Status == "Active")
                {
                    <span class="badge bg-success fs-6">@Model.Status</span>
                }
                else if (Model.Status == "Completed")
                {
                    <span class="badge bg-info fs-6">@Model.Status</span>
                }
                else if (Model.Status == "On Hold")
                {
                    <span class="badge bg-warning fs-6">@Model.Status</span>
                }
                else
                {
                    <span class="badge bg-secondary fs-6">@Model.Status</span>
                }
            </div>
        </div>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-8">
                <h6><i class="fas fa-align-left"></i> Description:</h6>
                <p class="text-muted mb-3">
                    @if (!string.IsNullOrEmpty(Model.Description))
                    {
                        @Model.Description
                    }
                    else
                    {
                        <em>No description provided</em>
                    }
                </p>
            </div>
            <div class="col-md-4">
                <div class="d-grid gap-2">
                    <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-outline-primary">
                        <i class="fas fa-edit"></i> Edit Project
                    </a>
                    <a asp-action="Index" class="btn btn-outline-secondary">
                        <i class="fas fa-arrow-left"></i> Back to Projects
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Project Statistics -->
<div class="row mb-4">
    <div class="col-md-3">
        <div class="card text-center h-100">
            <div class="card-body">
                <i class="fas fa-calendar-alt fa-2x text-primary mb-2"></i>
                <h6 class="card-title">Created Date</h6>
                <p class="card-text">
                    <strong>@Model.CreatedDate.ToString("MMM dd, yyyy")</strong><br>
                    <small class="text-muted">@((DateTime.Now - Model.CreatedDate).Days) days ago</small>
                </p>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card text-center h-100">
            <div class="card-body">
                <i class="fas fa-users fa-2x text-success mb-2"></i>
                <h6 class="card-title">Team Size</h6>
                <p class="card-text">
                    <strong>@employees.Count members</strong>
                </p>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card text-center h-100">
            <div class="card-body">
                <i class="fas fa-dollar-sign fa-2x text-warning mb-2"></i>
                <h6 class="card-title">Total Salary Cost</h6>
                <p class="card-text">
                    <strong>$@(employees.Sum(e => e.BaseSalary).ToString("N2"))</strong><br>
                    <small class="text-muted">Avg: $@((employees.Any() ? employees.Average(e => e.BaseSalary) : 0).ToString("N2"))</small>
                </p>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card text-center h-100">
            <div class="card-body">
                <i class="fas fa-chart-line fa-2x text-info mb-2"></i>
                <h6 class="card-title">Status</h6>
                <p class="card-text">
                    <strong>@Model.Status</strong><br>
                    <small class="text-muted">@((DateTime.Now - Model.CreatedDate).Days) days active</small>
                </p>
            </div>
        </div>
    </div>
</div>

<!-- Team Members -->
<div class="card mb-4">
    <div class="card-header">
        <h5 class="mb-0">
            <i class="fas fa-users"></i> Team Members (@employees.Count)
        </h5>
    </div>
    <div class="card-body">
        @if (employees.Any())
        {
            <div class="table-responsive">
                <table class="table table-striped table-hover">
                    <thead class="table-dark">
                        <tr>
                            <th>Employee</th>
                            <th>Department</th>
                            <th>Position</th>
                            <th>Salary</th>
                            <th>Attendance (30d)</th>
                            <th>Other Projects</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var employee in employees.OrderBy(e => e.Name))
                        {
                            <tr>
                                <td>
                                    <div class="fw-bold">@employee.Name</div>
                                    <small class="text-muted">@employee.Id</small>
                                </td>
                                <td>
                                    @if (employee.Department != null)
                                    {
                                        <span class="badge bg-primary">@employee.Department.Name</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary">No Department</span>
                                    }
                                </td>
                                <td>
                                    @if (employee.Position != null)
                                    {
                                        <span class="badge bg-info">@employee.Position.Name</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary">No Position</span>
                                    }
                                </td>
                                <td>
                                    <strong>$@employee.BaseSalary.ToString("N2")</strong>
                                </td>
                                <td>
                                    @{
                                        var rate = attendanceRates.ContainsKey(employee.Id) ? attendanceRates[employee.Id] : 0;
                                        string badgeClass = rate >= 90 ? "bg-success" : rate >= 75 ? "bg-warning" : "bg-danger";
                                    }
                                    <span class="badge @badgeClass">@rate%</span>
                                </td>
                                <td>
                                    @if (employeeOtherProjects.ContainsKey(employee.Id) && employeeOtherProjects[employee.Id].Any())
                                    {
                                        <div class="d-flex flex-wrap gap-1">
                                            @foreach (var project in employeeOtherProjects[employee.Id].Take(3))
                                            {
                                                <span class="badge bg-outline-secondary text-muted" title="@project.Name">@project.Id</span>
                                            }
                                            @if (employeeOtherProjects[employee.Id].Count > 3)
                                            {
                                                <span class="badge bg-light text-dark">+@(employeeOtherProjects[employee.Id].Count - 3) more</span>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <small class="text-muted">No other projects</small>
                                    }
                                </td>
                                <td>
                                    <a href="/Employee/Details/@employee.Id" class="btn btn-sm btn-outline-info" title="View Employee Details">
                                        <i class="fas fa-eye"></i>
                                    </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="text-center py-4">
                <i class="fas fa-user-friends fa-3x text-muted mb-3"></i>
                <h6 class="text-muted">No team members assigned</h6>
                <p class="text-muted">This project doesn't have any employees assigned yet.</p>
            </div>
        }
    </div>
</div>

<!-- Charts Section -->
@if (employees.Any())
{
    <div class="row mb-4">
        <div class="col-md-6">
            <div class="card h-100">
                <div class="card-header">
                    <h6 class="mb-0"><i class="fas fa-building"></i> Department Distribution</h6>
                </div>
                <div class="card-body">
                    <canvas id="departmentChart" width="400" height="200"></canvas>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card h-100">
                <div class="card-header">
                    <h6 class="mb-0"><i class="fas fa-briefcase"></i> Position Distribution</h6>
                </div>
                <div class="card-body">
                    <canvas id="positionChart" width="400" height="200"></canvas>
                </div>
            </div>
        </div>
    </div>
}

@section Scripts {
    <script src="https://kit.fontawesome.com/your-fontawesome-kit.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>

    @if (employees.Any())
    {
        <script>
            // Department Chart
            const departmentCtx = document.getElementById('departmentChart').getContext('2d');
            const departmentChart = new Chart(departmentCtx, {
                type: 'doughnut',
                data: {
                    labels: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(departmentChartData.labels)),
                    datasets: [{
                        data: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(departmentChartData.values)),
                        backgroundColor: [
                            '#FF6384',
                            '#36A2EB',
                            '#FFCE56',
                            '#4BC0C0',
                            '#9966FF',
                            '#FF9F40'
                        ]
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        }
                    }
                }
            });

            // Position Chart
            const positionCtx = document.getElementById('positionChart').getContext('2d');
            const positionChart = new Chart(positionCtx, {
                type: 'doughnut',
                data: {
                    labels: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(positionChartData.labels)),
                    datasets: [{
                        data: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(positionChartData.values)),
                        backgroundColor: [
                            '#36A2EB',
                            '#FF6384',
                            '#4BC0C0',
                            '#FFCE56',
                            '#FF9F40',
                            '#9966FF'
                        ]
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        }
                    }
                }
            });
        </script>
    }
}