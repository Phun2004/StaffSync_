@model List<Admin>
@{
    ViewBag.Title = "Admin Management";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1>Admin Management</h1>
    <a asp-action="Create" class="btn btn-primary">
        <i class="fas fa-plus me-2"></i>Create New Admin
    </a>
</div>

<div class="card">
    <div class="card-header">
        <h5 class="mb-0">
            <i class="fas fa-users-cog me-2"></i>System Administrators
        </h5>
    </div>
    <div class="card-body">
        @if (Model != null && Model.Any())
        {
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead class="table-light">
                        <tr>
                            <th>Username</th>
                            <th>Email</th>
                            <th>Role</th>
                            <th>Created Date</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var admin in Model)
                        {
                            <tr id="admin-row-@admin.Id">
                                <td>
                                    <div class="d-flex align-items-center">
                                        <div class="bg-primary rounded-circle d-flex align-items-center justify-content-center me-2"
                                             style="width: 32px; height: 32px;">
                                            <i class="fas fa-user-tie text-white"></i>
                                        </div>
                                        <div>
                                            <div class="fw-bold">@admin.Username</div>
                                            @if (admin.Username == Context.Session.GetString("Username"))
                                            {
                                                <small class="badge bg-info">You</small>
                                            }
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    @if (!string.IsNullOrEmpty(admin.Email))
                                    {
                                        @admin.Email
                                    }
                                    else
                                    {
                                        <span class="text-muted">Not set</span>
                                    }
                                </td>
                                <td>
                                    @if (admin.Role == "Super Admin")
                                    {
                                        <span class="badge bg-danger">@admin.Role</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-warning">@admin.Role</span>
                                    }
                                </td>
                                <td>
                                    <small class="text-muted">@admin.CreatedDate.ToString("MMM dd, yyyy")</small>
                                </td>
                                <td>
                                    <span class="badge bg-@(admin.IsActive ? "success" : "secondary")" id="status-badge-@admin.Id">
                                        @(admin.IsActive ? "Active" : "Inactive")
                                    </span>
                                </td>
                                <td>
                                    <div class="btn-group" role="group">
                                        <a asp-action="Edit" asp-route-id="@admin.Id"
                                           class="btn btn-outline-primary btn-sm"
                                           title="Edit Admin">
                                            <i class="fas fa-edit"></i>
                                        </a>

                                        @if (admin.Username != Context.Session.GetString("Username"))
                                        {
                                            <button type="button"
                                                    class="btn btn-outline-@(admin.IsActive ? "warning" : "success") btn-sm"
                                                    onclick="toggleAdminStatus(@admin.Id, '@admin.Username')"
                                                    title="@(admin.IsActive ? "Deactivate" : "Activate") Admin"
                                                    id="toggle-btn-@admin.Id">
                                                <i class="fas fa-@(admin.IsActive ? "ban" : "check")"></i>
                                            </button>
                                        }
                                        else
                                        {
                                            <button type="button"
                                                    class="btn btn-outline-secondary btn-sm"
                                                    disabled
                                                    title="Cannot modify your own account">
                                                <i class="fas fa-lock"></i>
                                            </button>
                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Admin Statistics -->
            <div class="row mt-4">
                <div class="col-md-4">
                    <div class="card bg-danger text-white">
                        <div class="card-body text-center">
                            <h4>@Model.Count(a => a.Role == "Super Admin")</h4>
                            <p class="mb-0">Super Admins</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card bg-warning text-white">
                        <div class="card-body text-center">
                            <h4>@Model.Count(a => a.Role == "Admin")</h4>
                            <p class="mb-0">Regular Admins</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card bg-success text-white">
                        <div class="card-body text-center">
                            <h4>@Model.Count(a => a.IsActive)</h4>
                            <p class="mb-0">Active Accounts</p>
                        </div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="text-center py-5">
                <i class="fas fa-users-cog fa-3x text-muted mb-3"></i>
                <h5 class="text-muted">No administrators found</h5>
                <p class="text-muted">Create the first admin account to get started.</p>
                <a asp-action="Create" class="btn btn-primary">
                    <i class="fas fa-plus me-2"></i>Create First Admin
                </a>
            </div>
        }
    </div>
</div>

<!-- Confirmation Modal -->
<div class="modal fade" id="confirmModal" tabindex="-1" aria-labelledby="confirmModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmModalLabel">Confirm Action</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p id="confirmMessage"></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmButton">Confirm</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let currentAdminId = 0;
        let currentUsername = '';

        function toggleAdminStatus(adminId, username) {
            currentAdminId = adminId;
            currentUsername = username;

            const statusBadge = document.getElementById(`status-badge-${adminId}`);
            const isActive = statusBadge.textContent.trim() === 'Active';
            const action = isActive ? 'deactivate' : 'activate';

            document.getElementById('confirmMessage').textContent =
                `Are you sure you want to ${action} admin "${username}"?`;

            const modal = new bootstrap.Modal(document.getElementById('confirmModal'));
            modal.show();
        }

        document.getElementById('confirmButton').addEventListener('click', function() {
            if (currentAdminId > 0) {
                // Show loading state
                const toggleBtn = document.getElementById(`toggle-btn-${currentAdminId}`);
                const originalContent = toggleBtn.innerHTML;
                toggleBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
                toggleBtn.disabled = true;

                // Create form data
                const formData = new FormData();
                formData.append('__RequestVerificationToken',
                    document.querySelector('input[name="__RequestVerificationToken"]').value);

                fetch(`@Url.Action("ToggleStatus", "Admin")/${currentAdminId}`, {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Update status badge
                        const statusBadge = document.getElementById(`status-badge-${currentAdminId}`);
                        statusBadge.className = `badge bg-${data.isActive ? 'success' : 'secondary'}`;
                        statusBadge.textContent = data.isActive ? 'Active' : 'Inactive';

                        // Update toggle button
                        toggleBtn.className = `btn btn-outline-${data.isActive ? 'warning' : 'success'} btn-sm`;
                        toggleBtn.innerHTML = `<i class="fas fa-${data.isActive ? 'ban' : 'check'}"></i>`;
                        toggleBtn.title = `${data.isActive ? 'Deactivate' : 'Activate'} Admin`;

                        // Show success message
                        showAlert('success', data.message);
                    } else {
                        // Restore original button state
                        toggleBtn.innerHTML = originalContent;
                        showAlert('danger', data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    toggleBtn.innerHTML = originalContent;
                    showAlert('danger', 'An error occurred while updating the admin status.');
                })
                .finally(() => {
                    toggleBtn.disabled = false;
                    bootstrap.Modal.getInstance(document.getElementById('confirmModal')).hide();
                });
            }
        });

        function showAlert(type, message) {
            // Remove existing alerts
            const existingAlert = document.querySelector('.alert');
            if (existingAlert) {
                existingAlert.remove();
            }

            // Create new alert
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
            alertDiv.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            `;

            // Insert alert at the top of the page
            const container = document.querySelector('.container, .container-fluid, main');
            if (container) {
                container.insertBefore(alertDiv, container.firstChild);
            }

            // Auto-dismiss after 5 seconds
            setTimeout(() => {
                if (alertDiv && alertDiv.parentNode) {
                    alertDiv.remove();
                }
            }, 5000);
        }

        // Initialize tooltips
        document.addEventListener('DOMContentLoaded', function() {
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[title]'));
            tooltipTriggerList.map(function(tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });
        });
    </script>
}